git commit --amend --author="harshasingamshetty1 <harshasingamshetty1@gmail.com>"

======================================================================

Restaurant structure in our case.
1. Any restaurant can have table sizes of either 2 or 4
2. We can join multiple tables together to form bigger tables.


we used, react-datepicker for date comp, and must not forget to add the date-picker styles to the Layout, or else the comp will not be good.

just learned about a cloud platform to store file called Cloudinary, which is way better than s3, while using nextJs, bcoz it comes with nextjs-cloudinary package, which provides with beautiful react UI components to upload any file directly from UI to our cloudinary account.

IN our schema, we have a booking and Table dbs.
The relation btw these 2 will be many 2 many relation. bcoz, 
A booking can involve multiple tables, if the partySize > 4 and 
A table can have multiple bookings in a day, but at different times. Therefore many:many relationship.
As we know that best way to deal with the many:many rln is to create a new table called booking_table, which contains foreign keys to both tables.
======================================================================

by default, eveery page.tsx, layout.tsx files have props sent by default which contains both the params and searchParams

Loading.tsx defined in the root of the folder will be the default loading page for all the pages within, so if we want to override, we need to define separate loading.tsx files for each path.

not-found.tsx, is a special file, to render when a page is not found.
we can use the notFound() from the next/navigation to get to this page.

both the not-found and error.tsx files must always be a client components.
error.tsx is also a special file, for rendering when an error occurs (other than the not found).
Also by default an Error props is passed to the error.tsx so that, we can render the error details in the component


Its best to use, <Image/> comp from next/image instead of regular html <img/> bcoz, its way more optimized for next 


=================================== Prisma ===================================

npx prisma init => will initialize the default schmea of db.

npx prisma db push => will make the schema changes sync

// here, from restaurant table, we will be able to acccess all the related tables (items,location, cuisine) without having to do multiple query calls, prisma handles the joining of tables for us.
===================================Layout.tsx=======================================================

In any route, we can define Layout.tsx file, which is a special file just like page.tsx file.
So, when we define a Layout, it applies for all its children paths. 
So very useful when we want to have a common layout just for lets say,
restuarant page and restuarant/menu page.

=============================================Link, useRouter() hook=======================================================

Link tag, is used for client side navigation. 
i.e if we use anchor tag, all the resources will be reloaded (its like a reload of page).
but when we use Link tag to navigate to pages within, then it only loads whatever is essential, all the other components will not be reloaded.


useRouter() hook, is best suited when we want to programatically navigate in the application.
i.e maybe based on some condns etc.
=================================SSR => Server Side Rendering=================================

helps us to have small bundles sent to client thus making it way faster.
and, helpful for SEO, as the rendered markup will be given to client and therfore, the search engine bots can easily preview the website, unlike when we use client side rendering, bocz it takes time for the client (browser) to render the js code.
more secure, as the apis can be stored on the server.

=================================LIMITATIONS of SSR ==================================

cannot listen the browser events like, onClick, on resize etc. bcoz, we are rendering everything on server.

Cannot acess browser apis, such as timeout, (local storage) etc.

Cannot maintain state.

Cannot use effects.

So, when u must have to use, any of the above, let say a button such that we can click...then create a component for that button and 'use client' directive so that, that particular comp acts exacltly similar to any react comp, which means client side rendering will happen.


=================================Caching in Next ==================================
Speed of retrieval of data:
Memory > File System > Network.

As network is always slower, Next comes with an automatic caching for the fetch() function. But we can customize it for data which changes very frequently.

const res = await fetch("https://jsonplaceholder.typicode.com/users" , {cache:'no-store'});

also, we can set the data valid only for certain time like this.

const res = await fetch("https://jsonplaceholder.typicode.com/users" , {next : {revalidate: 10}});


Remeber that, without the cache:nostore option, next always tries to cache the response used in fetch. therefore considers that particular page as a static page instead of dynamic (which could  actually be the case.)


Types of rendering =>1. Client side & 2. Server Side Rendering

and again within SSR => Static Rendering (at build time) and
                        Dynamic Rendering (at Run time)

Therefore, for any page, lets say, we are fetching current time from an api, and if we donot give the cache no store option, it considers the page as static and hence, in the production build, the time does not update on every reload, instead it picks up from the cache.

To avoid this, we must use the cache: no-store, then the page is considered as Dynmaic and hence, works as expected.


